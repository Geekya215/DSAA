/** Problem 12
 *
 * [Title]:
 * Highly divisible triangular number
 *
 * [Description]:
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *       1: 1
 *       3: 1,3
 *       6: 1,2,3,6
 *      10: 1,2,5,10
 *      15: 1,3,5,15
 *      21: 1,3,7,21
 *      28: 1,2,4,7,14,28
 *      We can see that 28 is the first triangle number to have over five divisors.
 *
 * [Goal]:
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#include <bits/stdc++.h>
using namespace std;

const long long goal = 5e6;

long long getSum(long long n) {
    return (1+n)*n/2;
}

long long getFactorCount(long long n) {
    long long count = 0;
    long long num = getSum(n);
    long long mid = sqrt(num);
    for(long long i = 1; i <= mid; ++i) {
        if(num%i == 0) {
            count++;
            if(i != num/i)
                count++;
        }
    }
    return count;
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    long long ans;
    for(int i = 1e3; ; ++i) {
        ans = getFactorCount(i);
        if(ans > goal) {
            cout << getSum(i) << endl;
            return 0;
        }
    }
    return 0;
}